#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <netdb.h> 
#include <netinet/in.h> 
#include <sys/socket.h> 
#include <sys/types.h> 
#include <arpa/inet.h>

#include <sys/stat.h>
#include <fcntl.h>
#include <dirent.h>
#include <libgen.h>     // for dirname()/basename()
#include <time.h> 

#include <ctype.h>

#define MAX 256
#define PORT 1234 
#define BLK 1024

char gdir[MAX];    // gdir[ ] stores dir strings
char *dir[64];
int  ndir;

char gpath[MAX];   // gpath[ ] stores token strings
char *name[64];
int  ntoken;

//               0      1      2     3     4      5        6       7       
char *cmd[] = {"get", "put", "ls", "cd", "pwd", "mkdir", "rmdir", "rm", 0};

int n, r;
int newsock;
int client_sock;

char ans[BLK];
char line[BLK];

int findCmd(char *command)
{
   int i = 0;
   while(cmd[i]){
     if (strcmp(command, cmd[i])==0)
         return i;
     i++;
   }
   return -1;
}

void getPathnames(char *env[]) {
    int index = 0;
    int i = 0;
    while (env[i]){
        printf("env[%d] = %s\n", i, env[i]);
        
        // Looking for PATH=
        if (strncmp(env[i], "PATH=", 5)==0){
        printf("show PATH: %s\n", env[i]);

        printf("decompose PATH into dir strings in gdir[ ]\n");
        strcpy(gdir, &env[i][5]);

        while(gdir[index] != '\0') { // decompose PATH into dir strings
            //printf("gdir[%d] == %c\n", index, gdir[index]);
            if (ndir == 0) {
                dir[ndir] = &gdir[index];
                ndir++;
            }
            if (gdir[index] == ':') {
                gdir[index] = '\0';
                dir[ndir] = &gdir[index + 1];
                ndir++;
            }
            index++;
        }
        printf("ndir == %d\n", ndir);
        
        break;
        }
        i++;
    } // end of large while loop
}

int decomposeLine()
{
    char *s;
    char *l;
    int i = 0;
    l = line;

    while (s = strtok_r(l, " ", &l))
    {
        if ((strcmp(s, "\n")==0) || (strcmp(s, "")==0) || (strcmp(s, " ")==0))
        {
            name[i] = NULL;
            break;
        }
        //printf("debug decomposeLine() 1\n");
        name[i] = s;
        i++;
    }
    return i;
}

/*void decomposeLine() {
    int nindex = 1;
    if (line[0] != '\0'){ // get first element in name
        gpath[0] = line[0];
      	name[0] = &gpath[0];
      	printf("name[0] = %s\n", name[0]);
    }
    while(line[nindex] != '\0') { // go through pathname and make tokens
      	if (line[nindex] == ' ') {
            gpath[nindex] = '\0'; // start new token
            ntoken++;
            name[ntoken] = &gpath[nindex + 1]; // put new pointer in name
            printf("ntoken = %d\n", ntoken);
        } else {
            printf("to gpath = %c at %d\n", line[nindex], nindex);
            gpath[nindex] = line[nindex]; // input letters to gpath
   	    }
   	    nindex++;
    }
}*/

int main(int argc, char *argv[], char *env[]) 
{ 
    int sfd, cfd, len; 
    struct sockaddr_in saddr, caddr; 
    int i, length;
    
    printf("1. create a socket\n");
    sfd = socket(AF_INET, SOCK_STREAM, 0); 
    if (sfd < 0) { 
        printf("socket creation failed\n"); 
        exit(0); 
    }
    
    printf("2. fill in server IP and port number\n");
    bzero(&saddr, sizeof(saddr)); 
    saddr.sin_family = AF_INET; 
    saddr.sin_addr.s_addr = htonl(INADDR_ANY); 
    saddr.sin_port = htons(PORT);
    
    printf("3. bind socket to server\n");
    if ((bind(sfd, (struct sockaddr *)&saddr, sizeof(saddr))) != 0) { 
        printf("socket bind failed\n"); 
        exit(0); 
    }
      
    // Now server is ready to listen and verification 
    if ((listen(sfd, 5)) != 0) { 
        printf("Listen failed\n"); 
        exit(0); 
    }
   
    while(1){
       // Try to accept a client connection as descriptor newsock
      
       printf("server: try to accept a new connection\n");
       length = sizeof(caddr);
       client_sock = accept(sfd, (struct sockaddr *)&caddr, &length);
       if (client_sock < 0){
          printf("server: accept error\n");
          exit(1);
       }
 
       printf("server: accepted a client connection from\n");
       printf("-----------------------------------------------\n");
       //printf("    IP=%s  port=%d\n", inet_ntoa(caddr.sin_addr.s_addr),
       //                             ntohs(caddr.sin_port));
       printf("    IP=%s  port=%d\n", "127.0.0.1", ntohs(caddr.sin_port));
       printf("-----------------------------------------------\n");

       // Processing loop
      while(1){
         printf("server ready for next request ....\n");
         n = read(client_sock, line, MAX);
         printf("line = %s\n", line);
         if (n==0){
           printf("server: client died, server loops\n");
           close(cfd);
           break;
         }
         printf("line = %s\n", line);
         line[n]=0;
         printf("line = %s\n", line);
         printf("server: read  n=%d bytes; line=[%s]\n", n, line);

        /*int index = 0;
        int spaceL = -1;
        char head[64];
        char tail[64];
        int sum;*/

        //getPathnames(env);
        //decomposeLine();
        decomposeLine();

        if (name[0] != NULL) {
          switch (findCmd(name[0])) {
              case 0:
                printf("get\n");
              break; // get
              case 1:
                printf("put\n");
              break; // put
              case 2:
                printf("ls\n");
              break; // ls
              case 3:
                printf("cd\n");
              break; // cd
              case 4:
                printf("pwd\n");
              break; // pwd
              case 5: 
                printf("mkdir\n");
              break; // mkdir
              case 6:
                printf("rmdir\n");
              break; // rmdir
              case 7:
                printf("rm\n");
              break; // rm
              default: // do whatever
                printf("default\n");

          /*while (line[index] != NULL && index != -1) { // check if line is numbers
            printf("line: '%c', index: %d\n", line[index], index);
            if (line[index] == ' ') { // is space
              printf("is space\n");
              if (spaceL != -1 || index == 0 || line[index + 1] == NULL) { // more than one space or first element (to prevent " 1234" and "1234 " from working)
                index = -2;
                printf("is repeat of space\n");
              }
              spaceL = index; // save location of space
            } else if (isdigit((int)line[index]) == 0) { // is not number
              printf("is not a number\n");
              index = -2;
            }
            printf("Made it through loop\n");
            ++index;
          }
          printf("index: %d\n", index);
          if (index != -1) { // line is fully numbers
            printf("Line is fully number\n");
            for (int i = 0; i < spaceL; i++) {
              head[i] = line[i];
            }
            head[spaceL] = NULL;
            int h = atoi(head);
            printf("Head: %s, %d\n", head, atoi(head));
            int j = spaceL + 1;
            for (; line[j] != NULL; j++) {
              tail[j - spaceL - 1] = line[j];
            }
            //tail[j-1] = NULL;
            printf("Tail: %s, %d\n", tail, atoi(tail));
            sum = atoi(head) + atoi(tail);
            printf("Sum: %d\n", sum);
            //strcpy(line, itoa(sum));
            sprintf(line, "%d", sum);
            printf("Line: %s\n", line);
          } else {
          strcat(line, " ECHO");
          } 

          // send the echo line to client 
          n = write(client_sock, line, MAX);

          printf("server: wrote n=%d bytes; ECHO=[%s]\n", n, line);
          printf("server: ready for next request\n");
          return 0;*/
          } // end of switch statement
        } // end of if statement
             // send the echo line to client 
        n = write(client_sock, line, MAX);

        printf("server: wrote n=%d bytes; ECHO=[%s]\n", n, line);
        printf("server: ready for next request\n");
        return 0;
      } // processing loop
    } // connection loop
  printf("Why are you here?\n");
}